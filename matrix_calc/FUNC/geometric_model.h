// MS_geometry_models.h
//----------------------------------------------
// Модуль формирует геометрическую модель
// манипуляционной системы
//----------------------------------------------
#include <math.h>
#define Nmax 10 // Максимальное число звеньев
// Aii_Matrix - формирует неизменяющиеся
// геометрические массивы (матрицы Aii*).
// Входные параметры:
// N - число звеньев;
// Lvect[3][Nmax]-массив векторов(Lx,Ly,Lz),
// задающих размеры звеньев;
// Mii[][3][Nmax] - массив матриц (3х3),
// определяющих ориентацию системы в
// исходном положении.
// Выходные параметры:
// Aii_[][4][Nmax] - массив матриц (4х4)
// преобразования однородных координат.BetaVect
int Aii_Matrix(int N, //____________________in
 double Lvect[3][Nmax], //____in
 double Mii[][3][Nmax], //____in
 double Aii_[][4][Nmax]) //___ou
{
    int i,j,k;
    if (N>=Nmax)
        return 1; // error
    else
        for (k=0;k<=N;k++)
        {
            for (i=0;i<3;i++)
                for (j=0;j<3;j++)
                    Aii_[i][j][k]=Mii[i][j][k];
            Aii_[0][3][k]=Lvect[0][k];
            Aii_[1][3][k]=Lvect[1][k];
            Aii_[2][3][k]=Lvect[2][k];
            Aii_[3][0][k]=0.0;
            Aii_[3][1][k]=0.0;
            Aii_[3][2][k]=0.0;
            Aii_[3][3][k]=1.0;
        } // end for(k)
    return 0;
}
// end Aii_Matrix()
//----------------------------------------------
// BetaVect - формирует вектор beta[Nmax].
// Входные параметры:
// N - число звеньев;
// Pvect[Nmax] - вектор опред. вид и
// последовательность кинематических пар,
// где значения:
// 1- вращ. пара типа 1,
// 2- вращ. пара типа 2,
// 3- поступательная пара.
// Выходные параметры:
// beta[Nmax] - вектор опред. вид и
// последовательность кинематических пар,
// где значения:
// 1- вращ. пара типа 1 или 2,
// 0- поступательная пара типа 2.
// beta[k]=1, если k-я кинем. пара вращательная
//(PVect[k]=1 или PVect[k]=2),
// beta[k]=0, если k-я кинем. пара
// поступательная (PVect[k]=3).
int BetaVect(int N,           //__________________in
             int Pvect[Nmax], //________in
             int beta[Nmax])  //________ou
{
    int k;
    if (N >= Nmax)
        return 1; // error
    else
        for (k = 0; k < N; k++)
            if (Pvect[k] == 1 || Pvect[k] == 2)
                beta[k] = 1;
            else if (Pvect[k] == 3)
                beta[k] = 0;
            else
                return 2; // error
    return 0;
} // end BetaVect()
//----------------------------------------------
// Ai_jMatrix - формирует изменяющиеся
// геометрические массивы
// (матрицы Ai*j).
// Входные параметры:
// N - число звеньев,
// beta[Nmax] - вектор опред. вид и
// последовательность кинематических пар,
// qj[Nmax] - вектор обобщенных координат.
// Выходные параметры:
// Ai_j[][4][Nmax]- массив матриц (4х4)
// преобразования однородных координат.
int Ai_jMatrix(int N,                  //___________________in
               int beta[Nmax],         //___________in
               double qj[Nmax],        //__________in
               double Ai_j[][4][Nmax]) //___ou
{
    int k;
    for (k = 0; k < N; k++)
    {
        Ai_j[0][0][k] = cos(beta[k] * qj[k]);
        Ai_j[1][0][k] = sin(beta[k] * qj[k]);
        Ai_j[2][3][k] = (1 - beta[k]) * qj[k];
        Ai_j[0][1][k] = -Ai_j[1][0][k];
        Ai_j[1][1][k] = Ai_j[0][0][k];
        Ai_j[0][2][k] = 0.0;
        Ai_j[0][3][k] = 0.0;
        Ai_j[1][2][k] = 0.0;
        Ai_j[1][3][k] = 0.0;
        Ai_j[2][0][k] = 0.0;
        Ai_j[2][1][k] = 0.0;
        Ai_j[2][2][k] = 1.0;
        Ai_j[3][0][k] = 0.0;
        Ai_j[3][1][k] = 0.0;
        Ai_j[3][2][k] = 0.0;
        Ai_j[3][3][k] = 1.0;
    } // end for(k)
    return 0;
} // end Ai_jMatrix()
//----------------------------------------------
// MultiMatrix - выполняет умножение матриц(4х4)
// по их номерам из массива.
// Входные параметры:
// kL - номер левой матрицы в массиве,
// ML[][4][Nmax]- левая матрица(4х4),
// kR - номер правой матрицы в массиве,
// MR[][4][Nmax]- правая матрица(4х4),
// k - номер матрицы результата в массиве.
// Выходные параметры:
// M[][4][Nmax]- матрица(4х4).
int MultiMatrix(
    int kL,//____________________in
    double ML[][4][Nmax], //____in
    int kR,//____________________in
    double MR[][4][Nmax], //____in
    int k, //____________________in
    double M [][4][Nmax]) //____ou
{
    int i, j, l;
    for (i=0; i<4; i++ )
        for (j=0; j<4; j++ )
        {
            M[i][j][k]= 0.;
            for (l=0; l<4; l++ )
                M[i][j][k]=M[i][j][k]+ML[i][l][kL]*MR[l][j][kR];
        }
    return 0;
}
//----------------------------------------------
// AijMatrix - формирует изменяющиеся
// геометрические массивы
// матрицы Aij=Aii*Ai*j.
// Входные параметры:
// N - число звеньев,
// Aii_[][4][Nmax]- массив матриц (4х4)
// преобразования однородных координат,
// Ai_j[][4][Nmax]- массив матриц (4х4)
// преобразования однородных координат.
// Выходные параметры:
// Aij[][4][Nmax]- массив матриц (4х4)
// преобразования однородных координат.
int AijMatrix(int N,                  //___________________in
              double Aii_[][4][Nmax], //___in
              double Ai_j[][4][Nmax], //___in
              double Aij[][4][Nmax])  //___ou
{
    int k;
    for (k = 0; k < N; k++)
        MultiMatrix(k, Aii_, k, Ai_j, k, Aij);
    return 0;
} // end AijMatrix()
//----------------------------------------------
// AoiMatrix - формирует изменяющиеся
// геометрические массивы
// матрицы Aoi=Ao(i-1)*A(i-1)i.
// Входные параметры:
// N - число звеньев,
// Aij[][4][Nmax]- массив матриц (4х4)
// преобразования однородных координат.
// Выходные параметры:
// Aoi[][4][Nmax]- массив матриц (4х4)
// преобразования однородных координат.
int AoiMatrix(int N,                 //___________________in
              double Aij[][4][Nmax], //___in
              double Aoi[][4][Nmax]) //___ou
{
    int i, j, k;
    for (i = 0; i < 4; i++)
        for (j = 0; j < 4; j++)
            Aoi[i][j][0] = Aij[i][j][0];
    for (k = 1; k < N; k++)
        MultiMatrix(k - 1, Aoi, k, Aij, k, Aoi);
    return 0;
} // end AoiMatrix()
  //----------------------------------------------